#Nathan Jones
#GRAND CENTRAL - FM MSTR EDITION
#2018

from datetime import datetime #ALLOWING THE DATE AND TIME TO BE DISPLAYED

import time         #THIS ALLOWS FOR THE PROGRAM TO USE THE SLEEP FUNCTION WITHIN THE PROGRAM
import sys          #ALLOWS ACCESS TO THE SYSTEM FROM WITHIN PYTHON 
import os.path      #ALLOWS THE PROGRAM TO OPEN OTHER SPECIFIC APPLICATIONS, IN THIS CASE THEGC MAIN MENU
import os           #ALLOWS FOR CONTROL OF THE MACHINE AND IS OS INCLUDING THE LIKES OF SAVING, OPENING/CLOSING FILES, ETC.
import string       #ALLOWS FOR DATA/ENTRIES TO BE RECOREDAS STRINGS AND NOT INDIVIDUAL CHARACTERS
import random       #THIS IMPORT ALLOWS FOR WORDS/LOCATIONS TO BE RANDOMLY SELECTED 
import statistics   #ALLOWS ACCESS TO THE STATISTICS LIBARY FOR THE DATA COLLECTION AND PROCESSING
import itertools    #ALLOWS ACCESS TO ACCESS TO THE ITERATORS LIBARY FOR EFFICENT LOOPING 
import datetime     #THIS ALLOWS FOR THE CURRENT TIME TO BE IMPORTED AND DISPLAYED FOR THE USER TO SEE 

FRUIT=['CHERRY','BELL','LEMON','ORANGE','STAR','SKULL'] #THESE ARE THE FRUITS DIFFERENT FRUITS THAT WILL BE 
SKULL_COUNT=0                                           #SETTING THE SKULL COUNT VARIABLE TO ITS DEFAULT OF 0 
CHERRY_COUNT=0                                          #SETTING THE CHERRY COUNT VARIABLE TO ITS DEFAULT OF 0
BELL_COUNT=0                                            #SETTING THE BELL COUNT VARIABLE TO ITS DEFAULT OF 0
LEMON_COUNT=0                                           #SETTING THE LEMON COUNT VARIABLE TO ITS DEFAULT OF 0
ORANGE_COUNT=0                                          #SETTING THE ORANGE COUNT VARIABLE TO ITS DEFAULT OF 0
STAR_COUNT=0                                            #SETTING THE STAR COUNT VARIABLE TO ITS DEFAULT OF 0
PENCE=100                                               #SETTING THE PENCE VARIABLE TO ITS DEFAULT OF 100
ROUND=0                                                 #SETTING THE ROUND VARIABLE TO ITS DEFAULT OF 0

LOOSE=["Unlucky on the GAME! Better luck next time!","Maybe next time!","Sooooo close, but so far...","It just wasnt your day today!"]                #LOSE MESSAGES - RANDOMLY SELECTED
WIN=["WELL DONE ON THE GAME! You Smashed it!","That was one hell of a game!","CONGRATULATIONS ON WINNING!","That was an IMPRESSIVE GAME! Well Done!"] #WIN MESSAGES - RANDOMLY SELECTED
win=False                      #SETTING THE DEFAULT VALUE FOR WIN TO BE FALSE  
Time = datetime.datetime.now() #ALLOWS GRAND CENTRAL TO GATHER THE CURRENT TIME

def SCROLL():        #CREATING THE FIRST SCROLL FUNCTION
    Scroll="\n"*70   #DEFING THAT THE FIRST SCROLL WILL LEAVE 70 LINES EMPTY
    print(Scroll)    #PRINTING THE FIRST SCROLL
 
def SCROLL2():       #CREATING THE SECOND SCROLL FUNCTION
    Scroll2="\n"*3   #DEFING THAT THE SECOND SCROLL WILL LEAVE 3 LINES EMPTY 
    print(Scroll2)   #PRINTING THE SECOND SCROLL

def SCROLL3():       #CREATING THE THIRD SCROLL FUNCTION
    Scroll3="\n"*28  #DEFING THAT THE THIRD SCROLL WILL LEAVE 28 LINES EMPTY
    print(Scroll3)   #PRINTING THE THIRD SCROLL


def FRUIT_MACHINE():

    print("""
███████╗██████╗ ██╗   ██╗██╗████████╗                   
██╔════╝██╔══██╗██║   ██║██║╚══██╔══╝                   
█████╗  ██████╔╝██║   ██║██║   ██║                      
██╔══╝  ██╔══██╗██║   ██║██║   ██║                      
██║     ██║  ██║╚██████╔╝██║   ██║                      
╚═╝     ╚═╝  ╚═╝ ╚═════╝ ╚═╝   ╚═╝                      
                                                        
███╗   ███╗ █████╗  ██████╗██╗  ██╗██╗███╗   ██╗███████╗
████╗ ████║██╔══██╗██╔════╝██║  ██║██║████╗  ██║██╔════╝
██╔████╔██║███████║██║     ███████║██║██╔██╗ ██║█████╗  
██║╚██╔╝██║██╔══██║██║     ██╔══██║██║██║╚██╗██║██╔══╝  
██║ ╚═╝ ██║██║  ██║╚██████╗██║  ██║██║██║ ╚████║███████╗
╚═╝     ╚═╝╚═╝  ╚═╝ ╚═════╝╚═╝  ╚═╝╚═╝╚═╝  ╚═══╝╚══════╝
                                                        
""")

    SCROLL2()
    MACHINE()#TAKING THE PLAYER TO THE MENU OF THE GAME 

def Message():

    if win == True:                       #IF THE WIN VARIABLE IS SET TO TRUE THEN THE FOLLOWING WILL TAKE PLACE 
        print(WIN[random.randint(0,3)])   #SELECTING AT RANDOM AND THEN DISPLAYING ONE OF THE WINNING MESSAGES 
        print(" ")                        #PRINTING AN EMPTY SPACE TO ACT AS A SPACE
        MACHINE()                         #TAKING THE PLAYER TO THE MENU OF THE GAME

    elif win == False:                    #IF THE WIN VARIABLE IS SET TO FALSE THEN THE FOLLOWING WILL TAKE PLACE 
        print(LOOSE[random.randint(0,3)]) #SELECTING AT RANDOM AND THEN DISPLAYING ONE OF THE WINNING MESSAGES
        print(" ")                        #PRINTING AN EMPTY SPACE TO ACT AS A SPACE
        MACHINE()                         #TAKING THE PLAYER TO THE MENU OF THE GAME

def MACHINE():

    global PENCE   #GIVING THE FUNCTION ACCESS TO 'PENCE' SO IT CAN UTILISE IT AND CHANGE IT IF NECCESSARY
    global ROUND   #GIVING THE FUNCTION ACCESS TO 'ROUND' SO IT CAN UTILISE IT AND CHANGE IT IF NECCESSARY 

    print(("SYSTEM TIME: ")+str(Time.strftime("%Y-%m-%d %H:%M"))) #DISPLAYING THE CURRENT TIME IN THE FORMAT OF: Y-M-D H:M
    print(" ")                                    #PRINTING AN EMPTY SPACE TO ACT AS A SPACE
    print("####################################") #CREATING A BORDER WITH THE USE OF '#' 
    print("#       Welcome to the MENU        #") #CREATING THE MENU HEADER FOR THE MENU 
    print("#                                  #") #CREATING AN EMPTPY SPACE WITHIN THE MENU WITH A BORDER OF '#'
    print("#            1. PLAY               #") #DISPLAYING THE OPTION TO PLAY THE GAME 
    print("#                                  #") #CREATING AN EMPTPY SPACE WITHIN THE MENU WITH A BORDER OF '#'
    print("#            Q. QUIT               #") #DISPLAYING THE OPTION TO QUIT THE GAME/MENU 
    print("#                                  #") #CREATING AN EMPTPY SPACE WITHIN THE MENU WITH A BORDER OF '#'
    print("####################################") #CREATING A BORDER WITH THE USE OF '#'

    answer=input("What option do you choose? ")   #ASKING THE PLAYER IF THEY WOULD LIKE TO CONTINUE ON TO THE NEXT MENU OR QUIT

    if answer == "1":          #IF THE PLAYER SELECTS OPTION 1 THE FOLLOWING WILL TAKE PLACE
       SCROLL()                #USING THE SCROLL FUNCTION THAT WILL SCROLL THE SCREEN 70 LINES
       PENCE = PENCE - 20      #TAKING AWAY 20 PENCE FORM THE PENCE VARIABLE AS EACH GAME COSTS THE PLAYER 20 PENCE
       ROUND = ROUND + 1       #ADDING 1 TO THE ROUND VARIABLE SO THAT PROGRAM CAN KEEP TRACK WHICH RUND THE USER IS ON
       GAME()                  #TAKING THE PLAYER TO THE FUCTION THAT WILL ACTUALLY RUN THE GAME   

    elif answer == "Q" or "q": #IF THE PLAER SELECTS Q/q THEN THE FOLLOWING WILL TAKE PLACE
       SCROLL()                #USING THE SCROLL FUNCTION THAT WILL SCROLL THE SCREEN 70 LINES
       print("GOODBYE!...")    #DISPLAYING THE GOODBYE MESSAGE WHICH ACKNOWLEDGES THE USERS SELECTION
       print(" ")              #PRINTING AN EMPTY SPACE TO ACT AS A SPACE
       print("LOADING...")     #DISPLAYING THE LOADING MESSAGE SO THAT THE PLAYER KNOWS THE PROGRAM IS EXITING
       time.sleep(5)           #MAKING THE PROGRAM WAIT 5 SECONDS BEFORE EXITING AND LAUNCHING THE USERS GRAND CNETRAL MENU
       os.startfile("C:\\Users\\natda\\OneDrive\\Sixth Form\\Computer Science\\CODE\\GRAND CENTRAL v3\\GRAND_CENTRAL_v3-MSTR\\TK_MSTR_v3.py")
       sys.exit()              #CLOSING THE ACTUAL PROGRAM IN THE BACKGROUND AFTER THE USERS GRAND CENRAL HAS BEEN OPENED
        
    else:                                   #IF ANY OTHER ANSWERS ARE GIVEN THAT ARE NOT STATED ABOVE THE FOLLOWING HAPPENS
       SCROLL()                             #USING THE SCROLL FUNCTION THAT WILL SCROLL THE SCREEN 70 LINES
       print(answer)                        #DISPLAYING THE ANSWER THAT THEY GAVE  
       print(" ")                           #PRINTING AN EMPTY SPACE TO ACT AS A SPACE
       print("INVALID ANSWER! - TRY AGAIN") #DISPLAING AN ERROR MESSAGE WHICH TELLS THEM WHY THEY HAVE GONE BACK TO THE MENU
       print(" ")                           #PRINTING AN EMPTY SPACE TO ACT AS A SPACE 
       MACHINE()                            #TAKING THE USER BACK TO THE MENU SO THAT THEY CAN RE-ENTER THEIR OPTION  
       
def GAME():

   SCROLL()
   global SKULL_COUNT   #GIVING THE FUNCTION ACCESS TO 'SKULL_COUNT' SO IT CAN UTILISE IT AND CHANGE IT IF NECCESSARY
   global CHERRY_COUNT  #GIVING THE FUNCTION ACCESS TO 'CHERRY_COUNT' SO IT CAN UTILISE IT AND CHANGE IT IF NECCESSARY
   global BELL_COUNT    #GIVING THE FUNCTION ACCESS TO 'BELL_COUNT' SO IT CAN UTILISE IT AND CHANGE IT IF NECCESSARY
   global LEMON_COUNT   #GIVING THE FUNCTION ACCESS TO 'LEMON_COUNT' SO IT CAN UTILISE IT AND CHANGE IT IF NECCESSARY
   global ORANGE_COUNT  #GIVING THE FUNCTION ACCESS TO 'ORANGE_COUNT' SO IT CAN UTILISE IT AND CHANGE IT IF NECCESSARY
   global STAR_COUNT    #GIVING THE FUNCTION ACCESS TO 'STAR_COUNT' SO IT CAN UTILISE IT AND CHANGE IT IF NECCESSARY
   global PENCE         #GIVING THE FUNCTION ACCESS TO 'PENCE' SO IT CAN UTILISE IT AND CHANGE IT IF NECCESSARY
   global ROUND         #GIVING THE FUNCTION ACCESS TO 'ROUND' SO IT CAN UTILISE IT AND CHANGE IT IF NECCESSARY

   print(("SYSTEM TIME: ")+str(Time.strftime("%Y-%m-%d %H:%M"))) #DISPLAYING THE CURRENT TIME IN THE FORMAT OF: Y-M-D H:M
   print(" ")                                                    #PRINTING AN EMPTY SPACE TO ACT AS A SPACE
   print(("ROUND: ")+str(ROUND))                                 #DISPLAYING TO THE USER WHAT ROUND NUMBER THEY ARE ON 
   print(("MONEY REMAINING: " )+str(PENCE))                      #DISPLAYING TO THE USER HOW MUCH MONEY THEY HAVE LEFT TO SPEND ON SPINS  
   Spin1 = random.choice(FRUIT)                                  #CREATING A VARIABLE THAT WILL ACT AS THE FIRST SPIN BY RANDOMLY SELECTING THE FRUIT 
   Spin2 = random.choice(FRUIT)                                  #CREATING A VARIABLE THAT WILL ACT AS THE SECOND SPIN BY RANDOMLY SELECTING THE FRUIT 
   Spin3 = random.choice(FRUIT)                                  #CREATING A VARIABLE THAT WILL ACT AS THE THIRD SPIN BY RANDOMLY SELECTING THE FRUIT

   print("         ")   #PRINTING AN EMPTY SPACE TO ACT AS A SPACE
   print("*********")   #CREATING A BORDER FOR THE SPINS VIEWER WITH THE USE OF '*'
   print("         ")   #PRINTING AN EMPTY SPACE TO ACT AS A SPACE
   print("SPIN ONE:")   #CREATING A HEADER FOR THE FIRST SPIN RESULT 
   print("         ")   #PRINTING AN EMPTY SPACE TO ACT AS A SPACE 
   print(Spin1)         #DISPLAYING THE RESULT FOR THE FIRST SPIN 
   print("         ")   #PRINTING AN EMPTY SPACE TO ACT AS A SPACE
   print("*********")   #CREATING A BORDER FOR THE SPINS VIEWER WITH THE USE OF '*' 
   print("         ")   #PRINTING AN EMPTY SPACE TO ACT AS A SPACE
   print("SPIN TWO:")   #CREATING A HEADER FOR THE SECOND SPIN RESULT 
   print("         ")   #PRINTING AN EMPTY SPACE TO ACT AS A SPACE
   print(Spin2)         #DISPLAYING THE RESULT FOR THE SECOND SPIN 
   print("         ")   #PRINTING AN EMPTY SPACE TO ACT AS A SPACE
   print("*********")   #CREATING A BORDER FOR THE SPINS VIEWER WITH THE USE OF '*'
   print("         ")   #PRINTING AN EMPTY SPACE TO ACT AS A SPACE
   print("SPIN THREE:") #CREATING A HEADER FOR THE THIRD SPIN RESULT 
   print("         ")   #PRINTING AN EMPTY SPACE TO ACT AS A SPACE
   print(Spin3)         #DISPLAYING THE RESULT FOR THE THIRD  SPIN
   print("         ")   #PRINTING AN EMPTY SPACE TO ACT AS A SPACE
   print("*********")   #CREATING A BORDER FOR THE SPINS VIEWER WITH THE USE OF '*'

        
   if PENCE == 0:                 #IF THE PLAYERS PENCE VARIABLE IS ON 0 THE FOLLOWING WILL TAKE PLACE 
       win=False                  #SETTING THE WIN VARIABLE TO BE FALSE 
       SCROLL2()                  #UTILISING THE SCROLL2 FUNCTION TO SCROLL 3 LINES
       print("GAME LOST")         #DISPLAYING GAME LOST MESSAGE TO THE PLAYER 
       print("YOUR COIN TOTAL:")  #DISPLAYING THE PLAYERS COIN TOTAL HEADER 
       print(PENCE)               #DISPLAYING THE PLAYERS COIN/PENCE COUNT
       print("ROUND NUMBER:")     #DISPLAYING THE PLAYERS ROUND NUMBER HEADER
       print(ROUND)               #DISPLAYING THE PLAYERS ROUND NUMBER
       PENCE = 100                #RESETTING THE PENCE COUNT BACK TO 100 
       ROUND = 0                  #RESETTING CURRENT ROUND TO 0
       SCROLL2()                  #UTILISING THE SCROLL2 FUNCTION TO SCROLL 3 LINES
       print(" ")                 #PRINTING AN EMPTY SPACE TO ACT AS A SPACE  
       if win == True:                        #IF THE WIN VARIABLE IS SET TO TRUE THE FOLLOWING WILL TAKE PLACE
            print(WIN[random.randint(0,3)])   #DISPLAYING A WIN MESSAGE TAHT HAS BEEN RANDOMLY SELECTED
            print(" ")                        #PRINTING AN EMPTY SPACE TO ACT AS A SPACE
       elif win == False:                     #IF THE WIN VARIABLE IS SET TO FALSE THE FOLLOWING WILL TAKE PLACE
            print(LOOSE[random.randint(0,3)]) #DISPLAYING A LOOSE MESSAGE TAHT HAS BEEN RANDOMLY SELECTED
            print(" ")                        #PRINTING AN EMPTY SPACE TO ACT AS A SPACE
       time.sleep(5)                          #MAKING THE PROGRAM WAIT 5 SECONDS BEFORE EXITING AND LAUNCHING THE USERS GRAND CNETRAL MENU                             
       os.startfile("C:\\Users\\natda\\OneDrive\\Sixth Form\\Computer Science\\CODE\\GRAND CENTRAL v3\\GRAND_CENTRAL_v3-MSTR\\TK_MSTR_v3.py")
       sys.exit()                             #CLOSING THE ACTUAL PROGRAM IN THE BACKGROUND AFTER THE USERS GRAND CENRAL HAS BEEN OPENED
   
   if PENCE < 20:  #IF THE COIN COUNT IS STILL ABOVE 20 THE FOLLOWING WILL TAKE PLACE
       win=True    #SETTING THE WIN VARIABLE TO BE TRUE
       GAME()      #RUNNING THE GAME AGIAN 
   
   if (Spin1) == ("CHERRY"):         #IF THE SPIN 1 IS A
      CHERRY_COUNT = CHERRY_COUNT +1 #THE COUNT GOES UP BY 1

   if (Spin1) == ("BELL"):           #IF THE SPIN 1 IS A 
      BELL_COUNT = BELL_COUNT +1     #THE COUNT GOES UP BY 1

   if (Spin1) == ("LEMON"):          #IF THE SPIN 1 IS A
      LEMON_COUNT = LEMON_COUNT +1   #THE COUNT GOES UP BY 1
  
   if (Spin1) == ("ORANGE"):         #IF THE SPIN 1 IS A
      ORANGE_COUNT = ORANGE_COUNT +1 #THE COUNT GOES UP BY 1

   if (Spin1) == ("STAR"):           #IF THE SPIN 1 IS A
      STAR_COUNT = STAR_COUNT +1     #THE COUNT GOES UP BY 1

   elif (Spin1) == ("SKULL"):        #IF THE SPIN 1 IS A
      SKULL_COUNT = SKULL_COUNT +1   #THE COUNT GOES UP BY 1


   if (Spin2) == ("CHERRY"):         #IF THE SPIN 2 IS A
      CHERRY_COUNT = CHERRY_COUNT +1 #THE COUNT GOES UP BY 1 

   if (Spin2) == ("BELL"):           #IF THE SPIN 2 IS A  
      BELL_COUNT = BELL_COUNT +1     #THE COUNT GOES UP BY 1
 
   if (Spin2) == ("LEMON"):          #IF THE SPIN 2 IS A
      LEMON_COUNT = LEMON_COUNT +1   #THE COUNT GOES UP BY 1

   if (Spin2) == ("ORANGE"):         #IF THE SPIN 2 IS A
      ORANGE_COUNT = ORANGE_COUNT +1 #THE COUNT GOES UP BY 1

   if (Spin2) == ("STAR"):           #IF THE SPIN 2 IS A
      STAR_COUNT = STAR_COUNT +1     #THE COUNT GOES UP BY 1

   elif (Spin2) == ("SKULL"):        #IF THE SPIN 2 IS A
      SKULL_COUNT = SKULL_COUNT +1   #THE COUNT GOES UP BY 1


   if (Spin3) == ("CHERRY"):         #IF THE SPIN 3 IS A
      CHERRY_COUNT = CHERRY_COUNT +1 #THE COUNT GOES UP BY 1

   if (Spin3) == ("BELL"):           #IF THE SPIN 3 IS A
      BELL_COUNT = BELL_COUNT +1     #THE COUNT GOES UP BY 1
 
   if (Spin3) == ("LEMON"):          #IF THE SPIN 3 IS A
      LEMON_COUNT = LEMON_COUNT +1   #THE COUNT GOES UP BY 1
 
   if (Spin3) == ("ORANGE"):         #IF THE SPIN 3 IS A 
      ORANGE_COUNT = ORANGE_COUNT +1 #THE COUNT GOES UP BY 1

   if (Spin3) == ("STAR"):           #IF THE SPIN 3 IS A
      STAR_COUNT = STAR_COUNT +1     #THE COUNT GOES UP BY 1

   elif (Spin3) == ("SKULL"):        #IF THE SPIN 3 IS A
      SKULL_COUNT = SKULL_COUNT +1   #THE COUNT GOES UP BY 1
      
   elif SKULL_COUNT == 2:            #IF THE SKULL COUNT IS 2 THE FOLLOWING WILL TAKE PLACE
      print("MONEY LOST")            #DISPLAYING TO USER THAT ALL OF THERE MONEY HAS GONE
      PENCE = PENCE - PENCE          #TAKING THE PENCE AWAY PENCE SO IT EQUALS 0

   elif SKULL_COUNT == 3:            #IF THE SKULL COUNT IS EQUAL TO 3 THE FOLLOWING WILL TAKE PLACE 
      win=False                      #SETTING THE WIN VARIABLE TO FALSE
      SCROLL2()                      #UTILISING THE SCROLL2 FUNCTION TO SCROLL 3 LINES
      print("GAME LOST")             #DISPLAYING THE GAME LOST MESSAGE 
      print("YOUR COIN TOTAL:")      #DISPLAYING THE PLAYERS COIN TOTAL HEADER 
      print(PENCE)                   #DISPLAYING THE PLAYERS COIN/PENCE COUNT      
      print("ROUND NUMBER:")         #DISPLAYING THE PLAYERS ROUND NUMBER HEADER
      print(ROUND)                   #DISPLAYING THE PLAYERS ROUND NUMBER
      PENCE = 100                    #RESETTING THE PENCE COUNT BACK TO 100 
      ROUND = 0                      #RESETTING CURRENT ROUND TO 0
      SCROLL2()                      #UTILISING THE SCROLL2 FUNCTION TO SCROLL 3 LINES
      print(" ")                     #PRINTING AN EMPTY SPACE TO ACT AS A SPACE
      if win == True:                #IF WIN IS EQUAL TO TRUE THEN THE FOLLOWING WILL TAKE PLACE  
          print(WIN[random.randint(0,3)])   #DISPLAYING A WIN MESSAGE TAHT HAS BEEN RANDOMLY SELECTED
          print(" ")                        #PRINTING AN EMPTY SPACE TO ACT AS A SPACE
      elif win == False:                    #IF WIN IS EQUAL TO FALSE THEN THE FOLLOWING WILL TAKE PLACE  
          print(LOOSE[random.randint(0,3)]) #DISPLAYING A LOOSE MESSAGE TAHT HAS BEEN RANDOMLY SELECTED
          print(" ")                        #PRINTING AN EMPTY SPACE TO ACT AS A SPACE
      time.sleep(5)                         #MAKING THE PROGRAM WAIT 5 SECONDS BEFORE EXITING AND LAUNCHING THE USERS GRAND CNETRAL MENU
      os.startfile("C:\\Users\\natda\\OneDrive\\Sixth Form\\Computer Science\\CODE\\GRAND CENTRAL v3\\GRAND_CENTRAL_v3-MSTR\\TK_MSTR_v3.py")
      sys.exit()                            #CLOSING THE ACTUAL PROGRAM IN THE BACKGROUND AFTER THE USERS GRAND CENRAL HAS BEEN OPENED

   if CHERRY_COUNT == 2:      #IF THE COUNT IS EQUAL TO 2
      print("GAME WON! +40")  #DIPSLAYS A WIN MESSAGE AND NEW COINS ADDED
      PENCE = PENCE + 40      #ADDING MORE PENCE TO THE PLAYERS PENCE SO THEY CAN KEEP PLAYING
  
   if BELL_COUNT == 2:        #IF THE COUNT IS EQUAL TO 2
      print("GAME WON! +40")  #DIPSLAYS A WIN MESSAGE AND NEW COINS ADDED
      PENCE = PENCE + 40      #ADDING MORE PENCE TO THE PLAYERS PENCE SO THEY CAN KEEP PLAYING

   if LEMON_COUNT == 2:       #IF THE COUNT IS EQUAL TO 2
      print("GAME WON! +20")  #DIPSLAYS A WIN MESSAGE AND NEW COINS ADDED
      PENCE = PENCE + 20      #ADDING MORE PENCE TO THE PLAYERS PENCE SO THEY CAN KEEP PLAYING

   if ORANGE_COUNT == 2:      #IF THE COUNT IS EQUAL TO 2
      print("GAME WON! +40")  #DIPSLAYS A WIN MESSAGE AND NEW COINS ADDED
      PENCE = PENCE + 40      #ADDING MORE PENCE TO THE PLAYERS PENCE SO THEY CAN KEEP PLAYING

   if STAR_COUNT == 2:        #IF THE COUNT IS EQUAL TO 2
      print("GAME WON! +60")  #DIPSLAYS A WIN MESSAGE AND NEW COINS ADDED
      PENCE = PENCE + 60      #ADDING MORE PENCE TO THE PLAYERS PENCE SO THEY CAN KEEP PLAYING

   if CHERRY_COUNT == 3:      #IF THE COUNT IS EQUAL TO 3   
      print("GAME WON! +100") #DIPSLAYS A WIN MESSAGE AND NEW COINS ADDED
      PENCE = PENCE + 100     #ADDING MORE PENCE TO THE PLAYERS PENCE SO THEY CAN KEEP PLAYING

   if BELL_COUNT == 3:        #IF THE COUNT IS EQUAL TO 3 
      print("GAME WON! +60")  #DIPSLAYS A WIN MESSAGE AND NEW COINS ADDED
      PENCE = PENCE + 60      #ADDING MORE PENCE TO THE PLAYERS PENCE SO THEY CAN KEEP PLAYING

   if LEMON_COUNT == 3:       #IF THE COUNT IS EQUAL TO 3
      print("GAME WON! +20")  #DIPSLAYS A WIN MESSAGE AND NEW COINS ADDED
      PENCE = PENCE + 20      #ADDING MORE PENCE TO THE PLAYERS PENCE SO THEY CAN KEEP PLAYING
   
   if ORANGE_COUNT == 3:      #IF THE COUNT IS EQUAL TO 3
      print("GAME WON! +80")  #DIPSLAYS A WIN MESSAGE AND NEW COINS ADDED
      PENCE = PENCE + 80      #ADDING MORE PENCE TO THE PLAYERS PENCE SO THEY CAN KEEP PLAYING

   if STAR_COUNT == 3:        #IF THE COUNT IS EQUAL TO 3
      print("GAME WON! +120") #DIPSLAYS A WIN MESSAGE AND NEW COINS ADDED
      PENCE = PENCE + 120     #ADDING MORE PENCE TO THE PLAYERS PENCE SO THEY CAN KEEP PLAYING

   SCROLL2()                  #UTILISING THE SCROLL2 FUNCTION TO SCROLL 3 LINES
   print("*********")         #CREATING A BORDER FOR THE SPINS VIEWER WITH THE USE OF '*'
   print("SKULL COUNT:")      #DISPLAYING THE SKULL COUNT TOTAL HEADER
   print(SKULL_COUNT)         #DISPLAYING THE ACTUAL SKULL COUNT
   print("*********")         #CREATING A BORDER FOR THE SPINS VIEWER WITH THE USE OF '*'

   print("CHERRY COUNT:")     #DISPLAYING THE CHERRY COUNT TOTAL HEADER
   print(CHERRY_COUNT)        #DISPLAYING THE ACTUAL CHERRY COUNT
   print("*********")         #CREATING A BORDER FOR THE SPINS VIEWER WITH THE USE OF '*'

   print("BELL COUNT:")       #DISPLAYING THE BELL COUNT TOTAL HEADER
   print(BELL_COUNT)          #DISPLAYING THE ACTUAL BELL COUNT
   print("*********")         #CREATING A BORDER FOR THE SPINS VIEWER WITH THE USE OF '*'

   print("LEMON COUNT:")      #DISPLAYING THE LEMON COUNT TOTAL HEADER
   print(LEMON_COUNT)         #DISPLAYING THE ACTUAL LEMON COUNT
   print("*********")         #CREATING A BORDER FOR THE SPINS VIEWER WITH THE USE OF '*'

   print("ORANGE COUNT:")     #DISPLAYING THE ORANGE COUNT TOTAL HEADER
   print(ORANGE_COUNT)        #DISPLAYING THE ACTUAL ORANGE COUNT
   print("*********")         #CREATING A BORDER FOR THE SPINS VIEWER WITH THE USE OF '*'

   print("STAR COUNT:")       #DISPLAYING THE STAR COUNT TOTAL HEADER 
   print(STAR_COUNT)          #DISPLAYING THE ACTUAL STAR COUNT
   print("*********")         #CREATING A BORDER FOR THE SPINS VIEWER WITH THE USE OF '*' 

   print("COIN TOTAL:")       #DISPLAYING THE COIN TOTAL HEADER 
   print(PENCE)               #DISPLAYING THE ACTUAL PENCE COUNT
   print("*********")         #CREATING A BORDER FOR THE SPINS VIEWER WITH THE USE OF '*'

   answer=input("PLAY AGAIN? Y/N: ") #ASKING THE USER IF THEY WOULD LIKE TO PLAY AGAIN 
   if answer == "Y" or "y":          #IF THE PLAYER SELECTS Y/y THE FOLLOWING TAKES PLACE 
      PENCE = PENCE - 20             #TAKES AWAY 20 PENCE AWAY FROM THE PLAYER EACH TIME THE
      SKULL_COUNT = 0                #SETTING THE COUNT TO 0
      CHERRY_COUNT = 0               #SETTING THE COUNT TO 0
      BELL_COUNT = 0                 #SETTING THE COUNT TO 0
      LEMON_COUNT = 0                # SETTING THE COUNT TO 0
      ORANGE_COUNT = 0               #SETTING THE COUNT TO 0
      STAR_COUNT = 0                 #SETTING THE COUNT TO 0
      ROUND = ROUND + 1              #ADDING 1 TO THE ROUND COUNT
      GAME()                         #RUNNING THE GAME AGAIN 
   
   elif answer == "N" or "n":               #IF THE ANSWER IS N/n THEN THE FOLLOWING WILL TAKE PLACE
      SCROLL()                              #USING THE SCROLL FUNCTION THAT WILL SCROLL THE SCREEN 70 LINES
      print(("SYSTEM TIME: ")+str(Time.strftime("%Y-%m-%d %H:%M"))) #DISPLAYING THE CURRENT TIME IN THE FORMAT OF: Y-M-D H:M
      print(" ")                            #PRINTING AN EMPTY SPACE TO ACT AS A SPACE 
      print("YOUR COIN TOTAL:")             #DISPLAYING THE PLAYERS COIN TOTAL HEADER 
      print(PENCE)                          #DISPLAYING THE PLAYERS COIN/PENCE COUNT    
      print("ROUND NUMBER:")                #DISPLAYING THE PLAYERS ROUND NUMBER HEADER  
      print(ROUND)                          #DISPLAYING THE PLAYERS ROUND NUMBER   
      PENCE = 100                           #RESETTING THE PENCE COUNT TO BE 100
      ROUND = 0                             #RESSETING THE ROUND VALUE TO BE 0 
      SCROLL2()                             #UTILISING THE SCROLL2 FUNCTION TO SCROLL 3 LINES
      print(" ")                            #PRINTING AN EMPTY SPACE TO ACT AS A SPACE
      if win == True:                       #IF WIN IS EQUAL TO TRUE THEN THE FOLLOWING WILL TAKE PLACE
          print(WIN[random.randint(0,3)])   #DISPLAYING A WIN MESSAGE TAHT HAS BEEN RANDOMLY SELECTED
          print(" ")                        #PRINTING AN EMPTY SPACE TO ACT AS A SPACE
      elif win == False:                    #IF WIN IS EQUAL TO FALSE THEN THE FOLLOWING WILL TAKE PLACE  
          print(LOOSE[random.randint(0,3)]) #DISPLAYING A LOOSE MESSAGE TAHT HAS BEEN RANDOMLY SELECTED
          print(" ")                        #PRINTING AN EMPTY SPACE TO ACT AS A SPACE
      time.sleep(5)                         #MAKING THE PROGRAM WAIT 5 SECONDS BEFORE EXITING AND LAUNCHING THE USERS GRAND CNETRAL MENU
      os.startfile("C:\\Users\\natda\\OneDrive\\Sixth Form\\Computer Science\\CODE\\GRAND CENTRAL v3\\GRAND_CENTRAL_v3-MSTR\\TK_MSTR_v3.py")
      sys.exit()                            #CLOSING THE ACTUAL PROGRAM IN THE BACKGROUND AFTER THE USERS GRAND CENRAL HAS BEEN OPENED

   else:                        #IF ANYOTHER ANSWERS ARE GIVEN THAN THE ONES STATED ABOVE THE FOLLOWING WILL TAKE PLACE 
      SCROLL()                  #USING THE SCROLL FUNCTION THAT WILL SCROLL THE SCREEN 70 LINES
      print(" ")                #PRINTING AN EMPTY SPACE TO ACT AS A SPACE
      print("INVALID ANSWER!")  #DISPLAING AN ERROR MESSAGE WHICH TELLS THEM WHY THEY HAVE GONE BACK TO THE MENU
      print(" ")                #PRINTING AN EMPTY SPACE TO ACT AS A SPACE
      MACHINE()                 #TAKING THE USER BACK TO THE MAIN MENU OF THE GAME
      
FRUIT_MACHINE()      
    
